//
//  TWProjectBase.xcconfig
//
//  Copyright 2010 Trollwerks Inc. All rights reserved.
//

SDKROOT = iphoneos
IPHONEOS_DEPLOYMENT_TARGET = 3.0
// 1 = iPhone; 2 = iPad; 1,2 = iPhone/iPad
TARGETED_DEVICE_FAMILY = 1

// "Standard (armv6 armv7)"
ARCHS = $(ARCHS_STANDARD_32_BIT)
// "Optimized (arm7)" -- cannot use with 3.0 deployment
//ARCHS = $(ARCHS_UNIVERSAL_IPHONE_OS);
// on armv7 want thumb always on; on armv6 makes floating point slower
GCC_THUMB_SUPPORT = YES
GCC_THUMB_SUPPORT[arch=armv6] = NO

// this kills Code Sense! (as of Xcode 3.2.2)
//RUN_CLANG_STATIC_ANALYZER = YES

ALWAYS_SEARCH_USER_PATHS = NO
GCC_PRECOMPILE_PREFIX_HEADER = YES
GCC_INCREASE_PRECOMPILED_HEADER_SHARING = YES
GCC_C_LANGUAGE_STANDARD = c99
GCC_ENABLE_OBJC_EXCEPTIONS = YES
GCC_OBJC_CALL_CXX_CDTORS = YES
GCC_FAST_OBJC_DISPATCH = YES
GCC_ENABLE_CPP_EXCEPTIONS = YES
GCC_ENABLE_CPP_RTTI = YES
PREBINDING = NO
GCC_DYNAMIC_NO_PIC = YES
// if you do not set this to NO, then your dynamic_cast will break, because gcc 4.0 is stupid
GCC_SYMBOLS_PRIVATE_EXTERN = NO
//GCC_FAST_MATH = YES; -- may affect rounding

INFOPLIST_PREPROCESS = YES
// from http://developer.apple.com/technotes/tn2007/tn2175.html
// and don't forget &amp; for & in strings, like URLs, or put them in IfnoPlist.strings perhaps
INFOPLIST_OTHER_PREPROCESSOR_FLAGS = -traditional -CC

// borrowed from Google Toolbox For Mac General.xcconfig

// Strictest warning policy that we can do
// Options intentionally turned off
// http://gcc.gnu.org/onlinedocs/gcc/Warning-Options.html
// -Wsystem-headers - since we can't fix them we are going to assume they're ok
// -Wtraditional - we are compiling with c99, so we don't care about trad
// -Wdeclaration-after-statement - we are compiling with c99 which allows this
// -Wpadded - lots of structures will get padded, so although this warning may
//            be useful to show us badly padded structures, it causes to many
//            warnings to be on generally.
// -Wunreachable-code - several macros use the do {} while (0) which always 
//                      flags this. e.g. all the ST... macros for unittesting
// -Wredundant-decls - we sometimes use redundant decls to add an attribute
//                     to a function/method (i.e. 
// -Waggregate-return - NSPoint, NSRect etc are often returned as aggregates
// -Wshorten-64-to-32 - this is defined in the 64 bit build settings
// -Wcast-qual - Would love to turn this on, but causes issues when converting
//               CFTypes to NSTypes and also has issues with some external
//               libraries (notably zlib)
// -Wundef - we conditionalize on TARGET_OS_IPHONE which is only defined 
//           in the iPhoneSDK making us unable to turn this warning on.
// -Wstrict-prototypes - breaks the TW_METHOD_CHECK macro
// -Wcast-align - causes a whole pile of problems buildng with iPhoneSDK

// Objective C warnings
// http://gcc.gnu.org/onlinedocs/gcc/Objective_002dC-and-Objective_002dC_002b_002b-Dialect-Options.html
// -Wassign-intercept - this really is more informational than a warning.
// -Wselector - the system headers define lots of methods with the same selector
//              rendering this mostly useless to us
// -Wstrict-selector-match - the system headers define lots of methods with the 
//                           same selector rendering this mostly useless to us
// Not being used currently because of Radar 5978978
// TW_GENERAL_WARNING_OBJC_ONLY_FLAGS=-Wundeclared-selector 

// C Only Warnings
TW_GENERAL_OTHER_CFLAGS = -Wdiv-by-zero -Wbad-function-cast -Wnested-externs -Wold-style-definition

// C++ Only Warnings
TW_GENERAL_OTHER_CPLUSPLUSFLAGS = -Wabi -Wctor-dtor-privacy -Wstrict-null-sentinel -Wsign-promo
GCC_WARN_EFFECTIVE_CPLUSPLUS_VIOLATIONS = YES
GCC_WARN_HIDDEN_VIRTUAL_FUNCTIONS = YES
GCC_WARN_ABOUT_INVALID_OFFSETOF_MACRO = YES
GCC_WARN_NON_VIRTUAL_DESTRUCTOR = YES

// General C/C++/ObjC/ObjC++ warnings
// These are generally ordered in easiest to hardest to support. 
// If you are transitioning, you can turn on the levels one level at a time 
// in your project file by editing TW_GENERAL_WARNING_CFLAGS and only 
// including the warning levels that you currently are compiling against. 
// GTM should always compile with full warnings.
TW_GENERAL_WARNING_CFLAGS1 = -Wall -Wendif-labels -Winvalid-pch -Wwrite-strings -Wstack-protector -Wstrict-aliasing=2
//TW_GENERAL_WARNING_CFLAGS2 = -Wpacked -Wmissing-field-initializers
// -Wpacked bitches about "packed attribute causes inefficient alignment for 'PLCrashReportFileHeader'"
// -Wglobal-constructors new in 3.2.2: “Global Construction or Destruction Required”
// -Wformat=2 -Wmissing-format-attribute we could add; with Xcode 3.2.3 whine about every -stringWithFormat
TW_GENERAL_WARNING_CFLAGS2 = -Wpacked -Wmissing-field-initializers  -Wglobal-constructors
//TW_EXTRA_WARNING_OVERRIDE_CFLAGS = -Wno-unused-parameter -Wno-sign-compare
//WARNING_CFLAGS = -Wall -Wextra -Wno-missing-field-initializers
TW_GENERAL_WARNING_CFLAGS3 = -Wextra $(TW_EXTRA_WARNING_OVERRIDE_CFLAGS) -Wpointer-arith -Wdisabled-optimization -Wfloat-equal
TW_GENERAL_WARNING_CFLAGS = $(TW_GENERAL_WARNING_CFLAGS1) $(TW_GENERAL_WARNING_CFLAGS2) $(TW_GENERAL_WARNING_CFLAGS3) 

// GCC_WARN_UNINITIALIZED_AUTOS is defined in the release/debug xcconfigs.
GCC_WARN_CHECK_SWITCH_STATEMENTS = YES
GCC_WARN_ALLOW_INCOMPLETE_PROTOCOL = YES
GCC_WARN_ABOUT_MISSING_NEWLINE = YES
GCC_WARN_INITIALIZER_NOT_FULLY_BRACKETED = YES
GCC_WARN_ABOUT_RETURN_TYPE = YES
GCC_WARN_MISSING_PARENTHESES = YES
GCC_WARN_ABOUT_POINTER_SIGNEDNESS = YES
GCC_WARN_UNKNOWN_PRAGMAS = YES
GCC_WARN_UNUSED_LABEL = YES
GCC_WARN_UNUSED_FUNCTION = YES
GCC_WARN_UNUSED_VALUE = YES
GCC_WARN_UNUSED_VARIABLE = YES
GCC_WARN_UNUSED_PARAMETER = YES
GCC_WARN_ABOUT_MISSING_PROTOTYPES = YES
GCC_TREAT_IMPLICIT_FUNCTION_DECLARATIONS_AS_ERRORS = YES
GCC_WARN_ABOUT_DEPRECATED_FUNCTIONS = YES
GCC_WARN_64_TO_32_BIT_CONVERSION[arch=*64*] = YES
// Use of Gestalt requires 4 char constants (amongst other things) -- but not on iPhone?
GCC_WARN_FOUR_CHARACTER_CONSTANTS = YES 
// We don't turn on shadow and sign comparisons because too many 3rd party
// libaries don't compile with them turned on (sign compare rarely catches
// errors, but shadow is very useful).
// NOTE: sign compare is also controlled by -Wextra, we we override it above.
GCC_WARN_SHADOW = YES
GCC_WARN_SIGN_COMPARE = YES
GCC_WARN_UNDECLARED_SELECTOR = YES

GCC_WARN_PEDANTIC = NO // doesn't even like #import
GCC_WARN_PROTOTYPE_CONVERSION = NO // may catch implicit casts, but lots of noise ... like YES and NO for BOOL
GCC_TREAT_NONCONFORMANT_CODE_ERRORS_AS_WARNINGS = NO
GCC_WARN_MULTIPLE_DEFINITION_TYPES_FOR_SELECTOR = NO // freaks on Cocoa
GCC_WARN_STRICT_SELECTOR_MATCH = NO // freaks on Cocoa, -objectForKey: specifically
GCC_WARN_TYPECHECK_CALLS_TO_PRINTF = NO // 4.0GM SDK warns on every -stringWithFormat:


// merge flag/path settings with possible previous configuration file flag settings

WARNING_CFLAGS = $(inherited) $(TW_GENERAL_WARNING_CFLAGS) $(TW_CONFIGURATION_WARNING_CFLAGS)
OTHER_CFLAGS = $(inherited) $(TW_GENERAL_OTHER_CFLAGS) $(TW_CONFIGURATION_OTHER_CFLAGS)
// note that OTHER_CPLUSPLUSFLAGS does *not* inherit -- default is $(OTHER_CFLAGS) and we want these separated
OTHER_CPLUSPLUSFLAGS = $(TW_GENERAL_OTHER_CPLUSPLUSFLAGS) $(TW_CONFIGURATION_OTHER_CPLUSPLUSFLAGS)
GCC_PREPROCESSOR_DEFINITIONS = $(inherited) $(TW_CONFIGURATION_GCC_PREPROCESSOR_DEFINITIONS)
OTHER_LDFLAGS = $(inherited) $(TW_TARGET_OTHER_LDFLAGS) $(TW_CONFIGURATION_OTHER_LDFLAGS)
// zip: -lz C++: -lstdc++ frameworks: -ObjC -all_load

TW_TROLLWERKS_SEARCH_PATH = source/twlib
HEADER_SEARCH_PATHS = $(inherited) $(TW_TROLLWERKS_SEARCH_PATH) $(TW_CONFIGURATION_HEADER_SEARCH_PATHS)

//LIBRARY_FLURRY_PATH = "$(SRCROOT)/source/support/Flurry"
//LIBRARY_SEARCH_PATHS = $(inherited) $(LIBRARY_FLURRY_PATH)
// FRAMEWORK_SEARCH_PATHS = $(inherited) "$(SRCROOT)/source/support/CrashReportSender"
